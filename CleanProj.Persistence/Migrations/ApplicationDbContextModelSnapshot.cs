// <auto-generated />
using System;
using CleanProj.Persistence.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanProj.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanProj.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdbyuserid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.PlaceHolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("PropmptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("propmptid");

                    b.HasKey("Id")
                        .HasName("pk_placeholders");

                    b.HasIndex("PropmptId")
                        .HasDatabaseName("ix_placeholders_propmptid");

                    b.ToTable("placeholders", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.Prompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("categoryid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdbyuserid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imageurl");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isactive");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int")
                        .HasColumnName("likecount");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_prompts");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_prompts_categoryid");

                    b.ToTable("prompts", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.PromptCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("categoryid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promptid");

                    b.HasKey("Id")
                        .HasName("pk_prompt_categories");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_prompt_categories_categoryid");

                    b.HasIndex("PromptId", "CategoryId")
                        .IsUnique()
                        .HasDatabaseName("ix_prompt_categories_promptid_categoryid");

                    b.ToTable("prompt_categories", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserFavoritePrompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promptid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_user_favorite_prompts");

                    b.HasIndex("PromptId")
                        .HasDatabaseName("ix_user_favorite_prompts_promptid");

                    b.HasIndex("UserId", "PromptId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_favorite_prompts_userid_promptid");

                    b.ToTable("user_favorite_prompts", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserLikePrompt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promptid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_user_like_prompt");

                    b.HasIndex("PromptId")
                        .HasDatabaseName("ix_user_like_prompt_promptid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_like_prompt_userid");

                    b.ToTable("user_like_prompt", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserPromptComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("content");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdbyuserid");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parentcommentid");

                    b.Property<Guid>("PromptId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promptid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_user_prompt_comment");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("ix_user_prompt_comment_parentcommentid");

                    b.HasIndex("PromptId")
                        .HasDatabaseName("ix_user_prompt_comment_promptid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_prompt_comment_userid");

                    b.ToTable("user_prompt_comment", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserSocialMediaAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<string>("SocialMediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("socialmediatype");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_user_social_media_accounts");

                    b.HasIndex("UserId", "SocialMediaType")
                        .IsUnique()
                        .HasDatabaseName("ix_user_social_media_accounts_userid_socialmediatype");

                    b.ToTable("user_social_media_accounts", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrencystamp");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("normalizedname");

                    b.HasKey("Id")
                        .HasName("pk_application_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("rolenameindex")
                        .HasFilter("[normalizedname] IS NOT NULL");

                    b.ToTable("application_roles", (string)null);

                    b.ToView(null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc"),
                            ConcurrencyStamp = "8d04dce2-969a-435d-bba4-df3f325983dc",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("cfd242d3-2107-4563-b2a4-15383e683964"),
                            ConcurrencyStamp = "cfd242d3-2107-4563-b2a4-15383e683964",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claimvalue");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roleid");

                    b.HasKey("Id")
                        .HasName("pk_roleclaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_roleclaims_roleid");

                    b.ToTable("roleclaims", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("accessfailedcount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrencystamp");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("createat");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdbyuserid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("emailconfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("lockoutenabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockoutend");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("modifiedat");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("modifiedbyuserid");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("normalizedemail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("normalizedusername");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phonenumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phonenumberconfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("securitystamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("twofactorenabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_application_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_application_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("emailindex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("usernameindex")
                        .HasFilter("[normalizedusername] IS NOT NULL");

                    b.ToTable("application_users", (string)null);

                    b.ToView(null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b9bb71a-feb6-45cc-9784-7401d8ae85b8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0B9BB71A-FEB6-45CC-9784-7401D8AE85B4",
                            CreateAt = new DateTimeOffset(new DateTime(2024, 12, 7, 16, 7, 38, 195, DateTimeKind.Unspecified).AddTicks(8174), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedByUserId = "0b9bb71a-feb6-45cc-9784-7401d8ae85b8",
                            Email = "sviridov288@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SVIRIDOV288@GMAIL.COM",
                            NormalizedUserName = "FERRO5",
                            PasswordHash = "AQAAAAIAAYagAAAAEIk0FkSJv+gieNGqzARXvHfpQ+Qus4kZenXTpRlgM3IU89HNsz8wBYkmFFqsjSKRTA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0B9BB71A-FEB6-45CC-9784-7401D8AE85B9",
                            TwoFactorEnabled = false,
                            UserName = "ferro5"
                        });
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claimtype");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claimvalue");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_application_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_claims_userid");

                    b.ToTable("application_user_claims", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("providerkey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("providerdisplayname");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_application_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_logins_userid");

                    b.ToTable("application_user_logins", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_application_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_application_user_roles_roleid");

                    b.ToTable("application_user_roles", (string)null);

                    b.ToView(null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("0b9bb71a-feb6-45cc-9784-7401d8ae85b8"),
                            RoleId = new Guid("8d04dce2-969a-435d-bba4-df3f325983dc")
                        });
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("loginprovider");

                    b.Property<string>("Name")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_application_user_tokens");

                    b.ToTable("application_user_tokens", (string)null);

                    b.ToView(null);
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.PlaceHolder", b =>
                {
                    b.HasOne("CleanProj.Domain.Entities.Prompt", "Prompt")
                        .WithMany("PlaceHolders")
                        .HasForeignKey("PropmptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_placeholders_prompts_propmptid");

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.Prompt", b =>
                {
                    b.HasOne("CleanProj.Domain.Entities.Category", null)
                        .WithMany("Prompts")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_prompts_categories_categoryid");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.PromptCategory", b =>
                {
                    b.HasOne("CleanProj.Domain.Entities.Category", "Category")
                        .WithMany("PromptCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prompt_categories_categories_categoryid");

                    b.HasOne("CleanProj.Domain.Entities.Prompt", "Prompt")
                        .WithMany("PromptCategories")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prompt_categories_prompts_promptid");

                    b.Navigation("Category");

                    b.Navigation("Prompt");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserFavoritePrompt", b =>
                {
                    b.HasOne("CleanProj.Domain.Entities.Prompt", "Prompt")
                        .WithMany("UserFavoritePrompts")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_favorite_prompts_prompts_promptid");

                    b.HasOne("CleanProj.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserFavoritePrompts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_favorite_prompts_application_users_userid");

                    b.Navigation("Prompt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserLikePrompt", b =>
                {
                    b.HasOne("CleanProj.Domain.Entities.Prompt", "Prompt")
                        .WithMany("UserLikePrompts")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_like_prompt_prompts_promptid");

                    b.HasOne("CleanProj.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserLikePrompts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_like_prompt_application_users_userid");

                    b.Navigation("Prompt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserPromptComment", b =>
                {
                    b.HasOne("CleanProj.Domain.Entities.UserPromptComment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("fk_user_prompt_comment_user_prompt_comment_parentcommentid");

                    b.HasOne("CleanProj.Domain.Entities.Prompt", "Prompt")
                        .WithMany("UserPromptComments")
                        .HasForeignKey("PromptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_prompt_comment_prompts_promptid");

                    b.HasOne("CleanProj.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserPromptComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_prompt_comment_application_users_userid");

                    b.Navigation("ParentComment");

                    b.Navigation("Prompt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserSocialMediaAccount", b =>
                {
                    b.HasOne("CleanProj.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserSocialMediaAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_social_media_accounts_application_users_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("CleanProj.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_roleclaims_application_roles_roleid");
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUser", b =>
                {
                    b.OwnsOne("CleanProj.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("ApplicationUserId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("applicationuserid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("last_name");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable((string)null);

                            b1.ToView(null);

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("CleanProj.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_claims_application_users_userid");
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("CleanProj.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_logins_application_users_userid");
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("CleanProj.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_roles_application_roles_roleid");

                    b.HasOne("CleanProj.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_roles_application_users_userid");
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("CleanProj.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_tokens_application_users_userid");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.Category", b =>
                {
                    b.Navigation("PromptCategories");

                    b.Navigation("Prompts");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.Prompt", b =>
                {
                    b.Navigation("PlaceHolders");

                    b.Navigation("PromptCategories");

                    b.Navigation("UserFavoritePrompts");

                    b.Navigation("UserLikePrompts");

                    b.Navigation("UserPromptComments");
                });

            modelBuilder.Entity("CleanProj.Domain.Entities.UserPromptComment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("CleanProj.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserFavoritePrompts");

                    b.Navigation("UserLikePrompts");

                    b.Navigation("UserPromptComments");

                    b.Navigation("UserSocialMediaAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
